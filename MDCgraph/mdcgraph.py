import dgl
import torch
import numpy as np
import pandas as pd
import math
import networkx as nx
import matplotlib.pyplot as plt
#import matplotlib.transforms as mtransforms
#import datetime
#t = datetime.datetime.now()

# position of the wires at the endcaps
# (In fact there is no need for calculations, because
#  we have the position of the sense wires at the ends (instead of z=0) and we can directly use this info.)
anglesnames=['eastphi','westphi', 'east_r', 'west_r']
anglesdtypes={'eastphi':np.float32,'westphi':np.float32,'east_r':np.float32,'west_r':np.float32}
wiresangles = pd.DataFrame()
wiresangles = pd.read_csv('/hpcfs/bes/mlgpu/hoseinkk/MLTracking/bhabha/GNN/MDCwiresgeometry/EndWireAngles.csv', header=0, sep=',', names=anglesnames, dtype=anglesdtypes)
wiresangles['gid'] = range(6796)
wiresangles["phi, r"] = wiresangles[["eastphi", "east_r"]].apply(tuple, axis=1)
wiresangles["(gid, (phi, r))"] = wiresangles[["gid", "phi, r"]].apply(tuple, axis=1)

# Wires at each layer
wires = np.array([40, 44, 48, 56, 64, 72, 80, 80, 76, 76, 88, 88, 100, 100, 112, 112, 128, 128, 140, 140, \
                 160, 160, 160, 160, 176, 176, 176, 176, 208, 208, 208, 208, 240, 240, 240, 240, \
                  256, 256, 256, 256, 288, 288, 288])
wiresum = np.cumsum(wires)
# The diameter of the wires are about 12 mm. First layer is in 71mm radius of the center.
# 1st tube radius: about 70mm to 170mm
# 1st gap: 170mm to 189mm, 2nd gap: 385mm to 392mm, 3rd gap: about 652mm to 658mm
# radius of the last layer: about 760mm  

#########################################################
pos = {gid:(phi, r) for gid, (phi, r) in tuple(wiresangles["(gid, (phi, r))"])}
mdcgraph1 = nx.Graph()
mdcgraph1.add_nodes_from(range(6796))
fig, ax = plt.subplots(figsize=(170, 170), subplot_kw=dict(projection='polar'))
nx.draw(mdcgraph1, pos=pos, with_labels = True, ax=ax)
ax.set_yticks([7.5, 12.1, 17, 18.9, 38.5, 39.2, 45.2, 52.2, 58.2, 65.2, 65.8], labels=['7.5 cm', '12.1 cm', '17.0 cm', '18.9 cm', '38.5 cm', '39.2 cm', '45.2 cm', '52.2 cm', '58.2 cm', '65.2 cm', '65.8 cm'])#, \
 #       position = (1.178, 0), color='b', fontsize=20)
plt.title('\n\nposition of the east end of the MDC sense wires defined with networkx as a graph  \
    \n karimi@ihep.ac.cn \n\n', fontsize=75)
plt.savefig('./results/mdcgraph1.png', bbox_inches='tight')

#########################################################
# with the following we can draw concentric circles and separate layer groups
# don't know why the tick labels cannot be plotted
fig, ax = plt.subplots(figsize=(170, 170), subplot_kw=dict(projection='polar'))
nx.draw_networkx_nodes(mdcgraph1, pos=pos, ax=ax)
nx.draw_networkx_labels(mdcgraph1, pos, ax=ax)
ax.set_yticks([7.5, 12.1, 17, 18.9, 38.5, 39.2, 45.2, 52.2, 58.2, 65.2, 65.8], labels=['7.5 cm', '12.1 cm', '17.0 cm', '18.9 cm', '38.5 cm', '39.2 cm', '45.2 cm', '52.2 cm', '58.2 cm', '65.2 cm', '65.8 cm'])#, \
 #       position = (1.178, 0), color='b', fontsize=20)
plt.title('\n\nposition of the east end of the MDC sense wires defined with networkx as a graph  \
    \n karimi@ihep.ac.cn \n\n', fontsize=75)
plt.savefig('./results/mdcgraph2.png', bbox_inches='tight')

# Plot selected layers from halfnextlayerneighbor.py for MDC.
# shell_layout plots concentric shells. The first element of all the shells are shifted 
# as much as the scalar "rotate" compared to the previous shell's first node.
# The exact position of the first node of each shell however cannot be controled.
# nlist for MDC
nlist = [range(40)]
for i in range(1, 43):
    nlist.append(range(wiresum[i - 1], wiresum[i]))
nlist

laynum = 10 # last layer, layer number starts from zero
mdcgraph3 = nx.Graph()
mdcgraph3.add_nodes_from(range(wiresum[laynum]))
fig = plt.figure(figsize=(120, 120))
nlist=nlist[0:laynum+1]
pos = nx.shell_layout(mdcgraph3, nlist, rotate=0)
nx.draw(mdcgraph3, pos)
plt.title(f'\n\nposition of the east end of the MDC sense wires defined with networkx as a graph up to {laynum} layer \
    \n karimi@ihep.ac.cn \n\n', fontsize=75)
plt.savefig('./results/mdcgraph3.png', bbox_inches='tight')

# MDC graph with realistic neighbors in MDCwiresfirstneighbors
# import the edges generated by MDCwiresfirstneighbors
edge_index = np.load('/hpcfs/bes/mlgpu/hoseinkk/MLTracking/bhabha/GNN/MDCwiresfirstneighbors/share/edge_index.npy')
# torch tensor in right format for Data graph
edge_index = torch.tensor(edge_index, dtype=torch.long).t().contiguous()
print('\nedge_index\n', edge_index, '\nedge_index shape\n', edge_index.shape)
# Defining MDC graph with dgl for "MDCwiresfirstneighbors"
edge_index = dgl.graph((edge_index[0], edge_index[1]))#, num_nodes=6795)
edge_index = dgl.to_networkx(edge_index)

nlistall = [range(40)]
for i in range(1, 43):
    nlistall.append(range(wiresum[i - 1], wiresum[i]))
nlistall

def realneighborplot(laynum, pix):
    nlist = nlistall[0: laynum + 1]
    fig = plt.figure(figsize=(pix, pix))
    subedge_index = edge_index.subgraph(range(wiresum[laynum]))
    pos = nx.shell_layout(subedge_index, nlist, rotate=0)
    nx.draw(subedge_index, pos, with_labels=True, font_weight='bold')
    plt.savefig(f'subedge_index_{laynum}lay_ro0.png')

# MDC graph with realistic neighbors from MDCwiresfirstneighbors and true postion of the nodes from east view of the wires.
def realneiandposplot(laymin, laymax, pix):
    nlist = nlistall[laymin: laymax + 1]
    fig, ax = plt.subplots(figsize=(pix, pix), subplot_kw=dict(projection='polar'))
    if laymin == 0:
        mingid = 0
    else:
        mingid = wiresum[laymin - 1]
    subedge_index = edge_index.subgraph(range(mingid, wiresum[laymax + 1]))
    pos = {gid:(phi, r) for gid, (phi, r) in tuple(wiresangles["(gid, (phi, r))"])}
    nx.draw(subedge_index, pos, with_labels=True, font_weight='bold')
    plt.title(f'\n\nposition of the nodes show realistic east end view of MDC sense wires. The connections show first neighbors according to \
         \n/hpcfs/bes/mlgpu/hoseinkk/MLTracking/bhabha/GNN/MDCwiresfirstneighbors/FirstNeighbors.py \
    \n layers {laymin} to {laymax + 1} \n karimi@ihep.ac.cn \n', fontsize=75)
    plt.savefig(f'subedge_index_layers{laymin}_to_{laymax}_realpos_{pix}resolution.png')

def realneiandposnodeplot(nodelist, pix):
    allneighbors = np.load('/hpcfs/bes/mlgpu/hoseinkk/MLTracking/bhabha/GNN/MDCwiresfirstneighbors/share/edge_index.npy')
    allnodearray = nodelist
    dfedge = pd.DataFrame(np.array(allneighbors), columns=['n1', 'n2'])
    subnodeedge_index = nx.Graph()
    for i in nodelist:
        arrayfori = np.array(pd.concat((dfedge[dfedge.n1 == i], dfedge[dfedge.n2 == i])))
        subnodeedge_index.add_edges_from(arrayfori)
    fig, ax = plt.subplots(figsize=(pix, pix), subplot_kw=dict(projection='polar'))
    pos = {gid:(phi, r) for gid, (phi, r) in tuple(wiresangles["(gid, (phi, r))"])}
    nx.draw(subnodeedge_index, pos, with_labels=True, font_weight='bold')
    plt.title(f'\n\nconnections of Selected nodes are shown. \nPosition of the nodes show realistic east end view of MDC sense wires. \nThe connections show first neighbors according to \
         \n/hpcfs/bes/mlgpu/hoseinkk/MLTracking/bhabha/GNN/MDCwiresfirstneighbors/FirstNeighbors.py \
         \n nodes are {nodelist} \n karimi@ihep.ac.cn \n\n', fontsize=75)
    plt.savefig(f'subedge_index_nodes_{nodelist}_realpos.png')

realneighborplot(5, 100)
realneiandposplot(14, 18, 200)
realneiandposnodeplot([132], 50)
realneiandposnodeplot([84, 132, 251, 314, 540, 1082, 1715, 2016, 2674, 3023, 3780, 3829, 4036, 4700, 4915, 6790], 200)
